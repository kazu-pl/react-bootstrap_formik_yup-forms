{"version":3,"sources":["common/yup/yup.tsx","view/Login.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["yup","mixed","required","string","email","Login","useField","emailField","emailMeta","passwordField","passwordMeta","Form","Group","className","controlId","Label","Control","type","placeholder","name","value","onChange","onBlur","isInvalid","touched","error","Text","color","style","Button","variant","initialValues","password","validationSchema","object","handleSubmit","values","resetForm","console","log","App","Container","fluid","onSubmit","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4KAEAA,YAAc,CACZC,MAAO,CACLC,SAAU,yBAEZC,OAAQ,CACNC,MAAO,iCAIIJ,Q,uDC6CAK,EA/CD,WAAO,IAAD,EACcC,YAAS,SADvB,mBACXC,EADW,KACCC,EADD,OAEoBF,YAAS,YAF7B,mBAEXG,EAFW,KAEIC,EAFJ,KAIlB,OACE,qCACE,eAACC,EAAA,EAAKC,MAAN,CAAYC,UAAU,OAAOC,UAAU,iBAAvC,UACE,cAACH,EAAA,EAAKI,MAAN,4BACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,KAAK,QACLC,YAAY,cACZC,KAAK,QACLC,MAAOb,EAAWa,MAClBC,SAAUd,EAAWc,SACrBC,OAAQf,EAAWe,OACnBC,UAAWf,EAAUgB,WAAahB,EAAUiB,QAE7CjB,EAAUiB,OACT,cAACd,EAAA,EAAKe,KAAN,CAAWC,MAAM,QAAQC,MAAO,CAAED,MAAO,OAAzC,SACGnB,EAAUiB,WAKjB,eAACd,EAAA,EAAKC,MAAN,CAAYC,UAAU,OAAOC,UAAU,oBAAvC,UACE,cAACH,EAAA,EAAKI,MAAN,uBACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,KAAK,WACLC,YAAY,WACZC,KAAK,WACLC,MAAOX,EAAcW,MACrBC,SAAUZ,EAAcY,SACxBC,OAAQb,EAAca,OACtBC,UAAWb,EAAac,WAAad,EAAae,QAEnDf,EAAae,OACZ,cAACd,EAAA,EAAKe,KAAN,CAAWE,MAAO,CAAED,MAAO,OAA3B,SAAqCjB,EAAae,WAItD,cAACI,EAAA,EAAD,CAAQC,QAAQ,UAAUb,KAAK,SAA/B,wBCvCAc,EAA+B,CACnC3B,MAAO,GACP4B,SAAU,IAGNC,EAAmBjC,EAAIkC,OAAO,CAClC9B,MAAOJ,EAAIG,SAASC,QAAQF,WAC5B8B,SAAUhC,EAAIG,SAASD,aAGnBiC,EAAe,SACnBC,EADmB,GAGf,IADFC,EACC,EADDA,UAEFC,QAAQC,IAAIH,GACZE,QAAQC,IAAI,CAAEF,eAqBDG,MAlBf,WACE,OACE,qBAAK3B,UAAU,MAAf,SACE,cAAC4B,EAAA,EAAD,CAAWC,MAAM,KAAjB,SACE,cAAC,IAAD,CACEX,cAAeA,EACfY,SAAUR,EACVF,iBAAkBA,EAHpB,SAKE,cAAC,IAAD,UACE,cAAC,EAAD,aCxBGW,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.3107d662.chunk.js","sourcesContent":["import * as yup from \"yup\";\r\n/** globalne ustawienia walidacji pól formularzy */\r\nyup.setLocale({\r\n  mixed: {\r\n    required: \"To pole jest wymagane\",\r\n  },\r\n  string: {\r\n    email: \"Podaj prawidłowy email\",\r\n  },\r\n});\r\n\r\nexport default yup;\r\n","import { useField } from \"formik\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nexport interface InitialValues {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nconst Login = () => {\r\n  const [emailField, emailMeta] = useField(\"email\");\r\n  const [passwordField, passwordMeta] = useField(\"password\");\r\n\r\n  return (\r\n    <>\r\n      <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n        <Form.Label>Email address</Form.Label>\r\n        <Form.Control\r\n          type=\"email\"\r\n          placeholder=\"Enter email\"\r\n          name=\"email\"\r\n          value={emailField.value}\r\n          onChange={emailField.onChange}\r\n          onBlur={emailField.onBlur}\r\n          isInvalid={emailMeta.touched && !!emailMeta.error}\r\n        />\r\n        {emailMeta.error && (\r\n          <Form.Text color=\"error\" style={{ color: \"red\" }}>\r\n            {emailMeta.error}\r\n          </Form.Text>\r\n        )}\r\n      </Form.Group>\r\n\r\n      <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n        <Form.Label>Password</Form.Label>\r\n        <Form.Control\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          name=\"password\"\r\n          value={passwordField.value}\r\n          onChange={passwordField.onChange}\r\n          onBlur={passwordField.onBlur}\r\n          isInvalid={passwordMeta.touched && !!passwordMeta.error}\r\n        />\r\n        {passwordMeta.error && (\r\n          <Form.Text style={{ color: \"red\" }}>{passwordMeta.error}</Form.Text>\r\n        )}\r\n      </Form.Group>\r\n\r\n      <Button variant=\"primary\" type=\"submit\">\r\n        Submit\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\n\nimport \"./App.css\";\nimport yup from \"common/yup/yup\";\nimport Container from \"react-bootstrap/Container\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Form as FormikForm, Formik, FormikHelpers } from \"formik\";\nimport Login, { InitialValues } from \"view/Login\";\n\nconst initialValues: InitialValues = {\n  email: \"\",\n  password: \"\",\n};\n\nconst validationSchema = yup.object({\n  email: yup.string().email().required(),\n  password: yup.string().required(),\n});\n\nconst handleSubmit = (\n  values: InitialValues,\n  { resetForm }: FormikHelpers<InitialValues>\n) => {\n  console.log(values);\n  console.log({ resetForm });\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container fluid=\"sm\">\n        <Formik\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          validationSchema={validationSchema}\n        >\n          <FormikForm>\n            <Login />\n          </FormikForm>\n        </Formik>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}